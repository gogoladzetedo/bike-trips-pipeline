CREATE SCHEMA IF NOT EXISTS dw; 

DROP TABLE IF EXISTS dw.dim_date; 
CREATE TABLE IF NOT EXISTS dw.dim_date(
      id DATE PRIMARY KEY
    , day_of_week INT
    , day_of_month INT
    , week INT
    , month INT
    , quarter INT
    , year INT
);

DROP TABLE IF EXISTS dw.dim_hour; 
CREATE TABLE IF NOT EXISTS dw.dim_hour(
    id INT PRIMARY KEY
);

DROP TABLE IF EXISTS dw.dim_bike_station; 
CREATE TABLE IF NOT EXISTS dw.dim_bike_station(
      id INT GENERATED BY DEFAULT AS IDENTITY
    , source_system_id INT
    , source_system_object_id INT
    , record_start_date DATE NOT NULL
    , record_end_date DATE NULL
    , name VARCHAR(2000)
    , longitude NUMERIC(9, 6)
    , latitude NUMERIC(9, 6)
    , PRIMARY KEY(record_start_date, id)
);

DROP TABLE IF EXISTS dw.dim_city; 
CREATE TABLE IF NOT EXISTS dw.dim_bike_station(
      id INT GENERATED BY DEFAULT AS IDENTITY
    , abbreviation VARCHAR(10) NOT NULL
    , name VARCHAR(100) NOT NULL
    , PRIMARY KEY(record_start_date, id)
);

DROP TABLE IF EXISTS dw.fact_weather; 
CREATE TABLE IF NOT EXISTS dw.fact_weather(
      id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    -- dims
    , date_id DATE
    , hour_id INT
    , city_id INT
    -- facts
    , totalSnow_cm NUMERIC(18,4)
    , FeelsLikeC NUMERIC(18,4)
    , humidity NUMERIC(18,4)
    , precipMM NUMERIC(18,4)
    , tempC NUMERIC(18,4)
    , visibility NUMERIC(18,4)
    , windspeedKmph NUMERIC(18,4)
);


DROP TABLE IF EXISTS dw.fact_bike_trips; 
CREATE TABLE IF NOT EXISTS dw.fact_bike_trips(
      id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    -- dims
    , date_id DATE
    , hour_id INT
    , city_id INT
    , start_station_id INT
    , end_station_id INT
    -- facts
    , trip_distance NUMERIC(18, 4)
    , trip_duration NUMERIC(18, 4)
    ---
    , staging_record_id INT
);

DROP TABLE IF EXISTS dw.fact_taxi_trips; 
CREATE TABLE IF NOT EXISTS dw.fact_taxi_trips(
      id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    -- dims
    , date_id DATE
    , hour_id INT
    , city_id INT
    -- facts
    , trip_passengers INT
    , trip_distance NUMERIC(18, 4)
    , trip_duration NUMERIC(18, 4)
    , trip_cost_fare NUMERIC(18, 4)
    , trip_cost_tip NUMERIC(18, 4)
    , trip_cost_total NUMERIC(18, 4)
    --
    , staging_record_id INT
);

DROP TABLE IF EXISTS dw.fact_taxi_trip_locations; 
CREATE TABLE IF NOT EXISTS dw.fact_taxi_trip_locations(
      id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    , taxi_trip_id INT
    -- facts
    , pickup_longitude NUMERIC(9, 6)
    , pickup_latitude NUMERIC(9, 6)
    , dropoff_longitude NUMERIC(9, 6)
    , dropoff_latitude NUMERIC(9, 6)
);


CREATE OR REPLACE FUNCTION dw.calculate_distance(lat1 float, lon1 float, lat2 float, lon2 float, units varchar)
RETURNS float AS $dist$
    DECLARE
        dist float = 0;
        radlat1 float;
        radlat2 float;
        theta float;
        radtheta float;
    BEGIN
        IF lat1 = lat2 OR lon1 = lon2
            THEN RETURN dist;
        ELSE
            radlat1 = pi() * lat1 / 180;
            radlat2 = pi() * lat2 / 180;
            theta = lon1 - lon2;
            radtheta = pi() * theta / 180;
            dist = sin(radlat1) * sin(radlat2) + cos(radlat1) * cos(radlat2) * cos(radtheta);

            IF dist > 1 THEN dist = 1; END IF;

            dist = acos(dist);
            dist = dist * 180 / pi();
            dist = dist * 60 * 1.1515;

            IF units = 'K' THEN dist = dist * 1.609344; END IF;

            RETURN dist;
        END IF;
    END;
$dist$ LANGUAGE plpgsql;
